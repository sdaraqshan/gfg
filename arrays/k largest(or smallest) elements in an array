k largest(or smallest) elements in an array

 
Question: Write an efficient program for printing k largest elements in an array. Elements in an array can be in any order.
For example, if the given array is [1, 23, 12, 9, 30, 2, 50] and you are asked for the largest 3 elements i.e., k = 3 then your program should print 50, 30, and 23.

Method 1 (Use Bubble k times) 
Thanks to Shailendra for suggesting this approach. 
1) Modify Bubble Sort to run the outer loop at most k times. 
2) Print the last k elements of the array obtained in step 1.
Time Complexity: O(n*k) 

Method 2 (Use temporary array) 
K largest elements from arr[0..n-1]

1) Store the first k elements in a temporary array temp[0..k-1]. 
2) Find the smallest element in temp[], let the smallest element be min. 
3-a) For each element x in arr[k] to arr[n-1]. O(n-k) 
If x is greater than the min then remove min from temp[] and insert x. 
3-b)Then, determine the new min from temp[]. O(k) 
4) Print final k elements of temp[]

Time Complexity: O((n-k)*k). If we want the output sorted then O((n-k)*k + k*log(k))
Thanks to nesamani1822 for suggesting this method. 

Method 3(Use Sorting) 
1) Sort the elements in descending order in O(n*log(n)) 
2) Print the first k numbers of the sorted array O(k). 

// Java code for k largest elements in an array
import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;

class GFG {
	public static void kLargest(Integer[] arr, int k)
	{
		// Sort the given array arr in reverse order
		// This method doesn't work with primitive data
		// types. So, instead of int, Integer type
		// array will be used
		Arrays.sort(arr, Collections.reverseOrder());

		// Print the first kth largest elements
		for (int i = 0; i < k; i++)
			System.out.print(arr[i] + " ");
	}

//This code is contributed by Niraj Dubey
public static ArrayList<Integer> kLargest(int[] arr, int k)
	{
		//Convert using stream
		Integer[] obj_array = Arrays.stream( arr ).boxed().toArray( Integer[] :: new);
		Arrays.sort(obj_array, Collections.reverseOrder());
		ArrayList<Integer> list = new ArrayList<>(k);

		for (int i = 0; i < k; i++)
			list.add(obj_array[i]);
	
		return list;
	}

	public static void main(String[] args)
	{
		Integer arr[] = new Integer[] { 1, 23, 12, 9,
										30, 2, 50 };
		int k = 3;
		kLargest(arr, k);
	
		//This code is contributed by Niraj Dubey
		//What if primitive datatype array is passed and wanted to return in ArrayList<Integer>
		int[] prim_array = { 1, 23, 12, 9, 30, 2, 50 };
		System.out.print(kLargest(prim_array, k));
	}
}

