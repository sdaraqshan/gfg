Maximum consecutive numbers present in an array

Find the length of maximum number of consecutive numbers jumbled up in an array.

Input : arr[] = {1, 94, 93, 1000, 5, 92, 78};
Output : 3 
The largest set of consecutive elements is
92, 93, 94 

The idea is to use hashing. We traverse through the array and for every element, we check if it is the starting element of its sequence. 
If yes then by incrementing its value we search the set and increment the length. By repeating this for all elements, we can find the lengths
of all consecutive sets in array. Finally we return length of the largest set.

// Java program to find largest consecutive
// numbers present in arr[].

------------o(n logn)--------
sort array and chk for consecutive elements are adjacent
------------------------------------

----------------hashtable o(n)---------

-------------------------------------o(n^2) hashmap-----------------------
import java.util.*;

class GFG
{
	
static int findLongestConseqSubseq(int arr[], int n)
{
	/* We insert all the array elements into
	unordered set. */
	HashSet<Integer> S = new HashSet<Integer>();
	for (int i = 0; i < n; i++)
		S.add(arr[i]);

	// check each possible sequence from the start
	// then update optimal length
	int ans = 0;
	for (int i = 0; i < n; i++)
	{

		// if current element is the starting
		// element of a sequence
		if(S.contains(arr[i]))
		{

			// Then check for next elements in the
			// sequence
			int j = arr[i];

			// increment the value of array element
			// and repeat search in the set
			while (S.contains(j))
				j++;

			// Update optimal length if this length
			// is more. To get the length as it is
			// incremented one by one
			ans = Math.max(ans, j - arr[i]);
		}
	}
	return ans;
}

// Driver code
public static void main(String[] args)
{
	int arr[] = {1, 94, 93, 1000, 5, 92, 78};
	int n = arr.length;
		System.out.println(findLongestConseqSubseq(arr, n));
}
}

// This code contributed by Rajput-Ji

