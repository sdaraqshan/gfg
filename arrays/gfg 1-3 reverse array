Using Temp array
Using Swapping
Using Collections.reverse() method
Using StringBuilder.append() method

for numbers
-----1------------
int[] b = new int[n];
        int j = n;
        for (int i = 0; i < n; i++) {
            b[j - 1] = a[i];
            j = j - 1;
---------------------

int i, k, t;
        for (i = 0; i < n / 2; i++) {
            t = a[i];
            a[i] = a[n - i - 1];
            a[n - i - 1] = t;
            
------------------------------

----------- o(n)time space o(1) ----------------------
String rev="";
for(int i=str.length()-1;i>=0;i--)
    rev+= str.charAt(i);
return rev;
        
-------------------------------------------
Java 2 pointer approach:  swap letters on both ends
Time Complexity: O(n) where n is the length of the string.
class Reverse
{
    public static String reverseWord(String str)
    {
        int n = str.length();
        int low = 0, high = n - 1;
        char[] reverse = str.toCharArray();
        
        while(low <= high)
        {
            char temp = reverse[low];
            reverse[low] = reverse[high];
            reverse[high] = temp;
            low++;
            high--;
        }
        return new String(reverse);
    }
}

----------------------------------------------------------------- time o(n) space o(n)-------------
// Java Program to Reverse a String using Stack

import java.io.*;
import java.util.*;

class GFG {

	public static String ReverseString(String str)
	{
		char[] reverseString = new char[str.length()];
		// Declare a stack of type Character
		Stack<Character> stack = new Stack<Character>();

		// Traverse the String and push the character one by
		// one into the Stack
		for (int i = 0; i < str.length(); i++) {
			// push the character into the Stack
			stack.push(str.charAt(i));
		}

		// Now Pop the Characters from the stack until it
		// becomes empty

		int i = 0;
		while (!stack.isEmpty()) { // popping element until
								// stack become empty
			// get the character from the top of the stack
			reverseString[i++] = stack.pop();
		}
		// return string object
		return new String(reverseString);
	}

	// Driver code
	public static void main(String[] args)
	{
		String str1 = "GeeksForGeeks";
		
		// call the function
		System.out.println(str1 + " <- Reverse -> "
						+ ReverseString(str1));
		
		String str2 = "Hello World";
		
		// call the function
		System.out.println(str2 + " <- Reverse -> "
						+ ReverseString(str2));
	}
}
