Longest Common Prefix in an Array 
Given a array of N strings, find the longest common prefix among all strings present in the array.


Example 1:

Input:
N = 4
arr[] = {geeksforgeeks, geeks, geek,
         geezer}
Output: gee
Explanation: "gee" is the longest common
prefix in all the given strings.
-----------------------------

Other Approaches:-

Word by Word Matching
Character by Character Matching
Divide and Conquer
Binary Search.
Using Trie

------------------------------- n^2-------------

int minlength = longestCommonPrefixPossible(arr,n);
 if (arr.length == 0 || arr.length==NULL) return "";
       String result="";
       char current;
       for(int i=0;i<minlength;i++){
           
           // storing each charcter of first string in array to compare with rest
           current=arr[0].charAt(i);
           for(int j=1;j<n;j++){
               // comparing eacg character of strings
               if(!(arr[j].charAt(i)==current))
                   {
                       if(result.equals(""))
                       return "-1";
                       else
                       return result;
                   }
           }
           // if not returned concatenate the current as it is presnt in all the strings
           result+=current;
       }
     
       return result;
    }

    // This Functin will return us the shortest string in array because that can be the longest possible common prefix
   private static int longestCommonPrefixPossible(String arr[],int n){
       int min=arr[0].length();
       for(int i=1;i<n;i++){
           if(arr[i].length()<min)
           min=arr[i].length();
       }
       return min;
       }
       }

------------------------------------------------- divide and conquer-------------

public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";    
        return longestCommonPrefix(strs, 0 , strs.length - 1);
}

private String longestCommonPrefix(String[] strs, int l, int r) {
    if (l == r) {
        return strs[l];
    }
    else {
        int mid = (l + r)/2;
        String lcpLeft =   longestCommonPrefix(strs, l , mid);
        String lcpRight =  longestCommonPrefix(strs, mid + 1,r);
        return commonPrefix(lcpLeft, lcpRight);
   }
}

String commonPrefix(String left,String right) {
    int min = Math.min(left.length(), right.length());       
    for (int i = 0; i < min; i++) {
        if ( left.charAt(i) != right.charAt(i) )
            return left.substring(0, i);
    }
    return left.substring(0, min);
}

---
Complexity Analysis

In the worst case we have nn equal strings with length mm

Time complexity : O(S)O(S), where SS is the number of all characters in the array, S = m \cdot nS=m⋅n Time complexity is 2 \cdot T\left ( \frac{n}{2} \right ) + O(m)2⋅T( 
2n)+O(m). Therefore time complexity is O(S)O(S). In the best case this algorithm performs O(minLen \cdot n)O(minLen⋅n) comparisons, where minLenminLen is the shortest string 
 of the array

Space complexity : O(m \cdot \log n)O(m⋅logn)

There is a memory overhead since we store recursive calls in the execution stack. There are \log nlogn recursive calls, each store need mm space to store the result, 
so space complexity is O(m \cdot \log n)O(m⋅logn)

---------------------------------------------------------

Approach 4: Binary search
The idea is to apply binary search method to find the string with maximum value L, which is common prefix of all of the strings. The algorithm searches space is the interval (0 \ldots
minLen)(0…minLen), where minLen is minimum string length and the maximum possible common prefix. Each time search space is divided in two equal parts, one of them is discarded,
because it is sure that it doesn't contain the solution. There are two possible cases:

S[1...mid] is not a common string. This means that for each j > i S[1..j] is not a common string and we discard the second half of the search space.
S[1...mid] is common string. This means that for for each i < j S[1..i] is a common string and we discard the first half of the search space, because we try to find longer
common prefix.

public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0)
        return "";
    int minLen = Integer.MAX_VALUE;
    for (String str : strs)
        minLen = Math.min(minLen, str.length());
    int low = 1;
    int high = minLen;
    while (low <= high) {
        int middle = (low + high) / 2;
        if (isCommonPrefix(strs, middle))
            low = middle + 1;
        else
            high = middle - 1;
    }
    return strs[0].substring(0, (low + high) / 2);
}

private boolean isCommonPrefix(String[] strs, int len){
    String str1 = strs[0].substring(0,len);
    for (int i = 1; i < strs.length; i++)
        if (!strs[i].startsWith(str1))
            return false;
    return true;
}

Complexity Analysis

In the worst case we have nn equal strings with length mm

Time complexity : O(S \cdot \log m)O(S⋅logm), where SS is the sum of all characters in all strings.

The algorithm makes \log mlogm iterations, for each of them there are S = m \cdot nS=m⋅n comparisons, which gives in total O(S \cdot \log m)O(S⋅logm) time complexity.

Space complexity : O(1)O(1). We only used constant extra space.

-----------------------------------------------------------------------------------

 if(strs == null || strs.length == 0)    return "";
    String pre = strs[0];
    int i = 1;
    while(i < strs.length){
       while(!strs[i].startsWith(pre))
            pre = pre.substring(0,pre.length()-1);
        i++;
    }
    return pre;
}
