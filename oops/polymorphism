lass Helper { 

static int Multiply(int a, int b) 

{	return a * b;   } 

static double Multiply(double a, double b) 

{   return a * b;  } 

} 

class GFG { 

// Main driver method 

public static void main(String[] args) 

{	System.out.println(Helper.Multiply(2, 4)); 

System.out.println(Helper.Multiply(5.5, 6.3)); 

} 

} 

*********************************************************

class Parent {  // base class 

	void show() 

	{   System.out.println("Parent's show()");    } 

} 

class Child extends Parent {   // Inherited class 

	// This method overrides show() of Parent 

	@Override 

	void show() 

	{   System.out.println("Child's show()");    } 

} 

class Main { 

	public static void main(String[] args) 

	{   // If a Parent type reference refers   // to a Parent object, then Parent's   // show is called 

		Parent obj1 = new Parent(); 

		obj1.show(); 

 // If a Parent type reference refers   // to a Child object Child's show()  // is called. This is called RUN TIME 

		Parent obj2 = new Child(); 

		obj2.show(); 

	} 

} 

o/p 

Parent's show() 
Child's show() 
